#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "Wire.h"

/* Wifi network station credentials */
#define WIFI_SSID       "OnlyStaff"
#define WIFI_PASSWORD   "jesuslove2"

/* Telegram BOT Token (Get from Botfather) */
#define BOT_TOKEN       "5521451449:AAFFOyVD0dxFqz2LxwsX99N4CxdmsFy7MO8"

String chat_ids[50] = {};
String chat_id_masters[5] = {"241097915" }; // –ú–∞—Å—Ç–µ—Ä —á–∞—Ç—ã


OneWire oneWire(2);
DallasTemperature sensors(&oneWire);

const unsigned long BOT_MTBS = 1000; // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã
const unsigned long BOT_ALR = 1000 * 60 * 60 * 1; // –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—á

#define REL_1 4
bool ledStatus = true;
bool BuzzerStatus = false;

bool heating = true;
bool is_set_temp = false;
float set_temp = 20;
byte ds18b20_lost = 0;


// –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
unsigned long bot_lasttime; // last time messages' scan has been done
unsigned long bot_lasttime_alr; // last time messages' scan has been done

X509List cert(TELEGRAM_CERTIFICATE_ROOT);
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);


void handleNewMessages(int numNewMessages)
{
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++)
  {
    String chat_id = bot.messages[i].chat_id;

    if (check_chat_id(chat_id)) {
      send_messages_to_master("üõ† –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç " + chat_id + " –ò–º—è "+ bot.messages[i].from_name + " üõ†");
    }

    String text = bot.messages[i].text;
    if (is_set_temp) {
      if (text.toFloat() < 18 or text.toFloat() > 24) {
        bot.sendMessage(chat_id, "‚ùóÔ∏è‚ùóÔ∏è–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùóÔ∏è‚ùóÔ∏è\n –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 24", "");
      } else {
        set_temp = text.toFloat();
        bot.sendMessage(chat_id, "–ó–∞–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä—É—ã: " + String(set_temp) + "¬∞C", "");
        String message = "üõ†–ë—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞üõ†\n";
        message += "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: " + bot.messages[i].from_name;
        send_messages_to_master(message);
        is_set_temp = LOW;
      }
    }
    else if (text == "/heating_off")
    {
      heating = LOW;
      bot.sendMessage(chat_id, "–û—Ç–æ–ø–ª–µ–Ω–∏–µ –û–¢–ö–õ–Æ–ß–ï–ù–û‚ùÑÔ∏è", "");
      String message = "üõ†–û—Ç–æ–ø–ª–µ–Ω–∏–µ –û–¢–ö–õ–Æ–ß–ï–ù–ûüõ†\n";
      message += "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: " + bot.messages[i].from_name;
      send_messages_to_master(message);
    }
    else if (text == "/heating_on")
    {
      heating = HIGH;
      bot.sendMessage(chat_id, "–û—Ç–æ–ø–ª–µ–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–ûüî•", "");
      String message = "üõ†–û—Ç–æ–ø–ª–µ–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–ûüõ†\n";
      message += "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: " + bot.messages[i].from_name;
      send_messages_to_master(message);
    }
    else if (text == "/state")
    {
      sensors.requestTemperatures();
      float temp = sensors.getTempCByIndex(0);
      String message = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏: " + String(temp) + "¬∞C\n";
      message += "–ó–∞–¥–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(set_temp) + "¬∞C\n";
      if (digitalRead(REL_1) == LOW) {
        message += "–û—Ç–æ–ø–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
      } else {
        message += "–û—Ç–æ–ø–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
      }
      bot.sendMessage(chat_id, message, "");
    }
    else if (text == "/set_temp")
    {
      is_set_temp = HIGH;
      bot.sendMessage(chat_id, "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + String(set_temp) + "¬∞C\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë", "");
    }
    else if (text == "/help" or text == "/start")
    {
      String welcome = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏–µ, –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –º–µ–Ω—é\n‚ÜôÔ∏è";
      bot.sendMessage(chat_id, welcome, "");
    }
  }
}


void send_messages(String message) {
  int i = 0;
  while (chat_ids[i] != "" ) {
    bot.sendMessage(chat_ids[i], message, "");
    i = i + 1;
  }

}


void send_messages_to_master(String message) {
  int i = 0;
  while (chat_id_masters[i] != "" ) {
    bot.sendMessage(chat_id_masters[i], message, "");
    i = i + 1;
  }

}

bool check_chat_id(String chat_id) {
  int i = 0;
  while (not chat_ids[i].equals(chat_id) && chat_ids[i] != "") {
    i = i + 1;
    if (i == 50) return false ;
  }
  if (chat_ids[i] != "") return false;
  chat_ids[i] = chat_id;
  return true;
}


void setup() {
  Serial.begin(115200);
  Serial.println();

  pinMode(REL_1, OUTPUT);
  digitalWrite(REL_1, HIGH);

  configTime(0, 0, "pool.ntp.org");      // get UTC time via NTP
  secured_client.setTrustAnchors(&cert); // Add root certificate for api.telegram.org
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  send_messages_to_master("üõ†–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª–∞—Å—åüõ†");

  sensors.begin();
}


void loop() {
  if (millis() - bot_lasttime > BOT_MTBS)
  {
    sensors.requestTemperatures();   // –æ—Ç –¥–∞—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages) // –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();

    if (heating == false) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—á–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
      if (digitalRead(REL_1) == HIGH); {
        digitalWrite(REL_1, LOW);
      }
    }
    else {
      float temp = sensors.getTempCByIndex(0);

      if (temp == -127) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ—Ä—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–æ–º
        ds18b20_lost = ds18b20_lost + 1;
        if (ds18b20_lost > 30) {
          send_messages_to_master("üõ†–ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–æ–ºüõ†");
          ds18b20_lost = 0;
        }
      }
      else {
        ds18b20_lost = 0;
        if (temp < set_temp) { //–≤–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä—É–∞ –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–π
          digitalWrite(REL_1, HIGH);
        } else if (temp > set_temp + 0.49) { // –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –µ–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ –∑–∞–¥–∞–Ω–Ω–æ –Ω–∞ –ø–æ–ª –≥—Ä–∞–¥—É—Å–∞
          digitalWrite(REL_1, LOW);
        }
        if (temp < set_temp - 3) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä—É—ã
          if (millis() - bot_lasttime_alr > BOT_ALR) {
            bot_lasttime_alr = millis();
            send_messages("‚ùóÔ∏è‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è‚ùóÔ∏è \n—Ç–µ–º–ø–µ—Ä–∞—Ç—Ä—É–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–πü•∂ü•∂" + String(temp) + "¬∞C");
          }
        }
      }
    }
  }
}
